import pandas as pd
import tkinter as tk
from tkinter import filedialog

OLD_FILE = ""
NEW_FILE = ""
PM_SHEET = ""
OUTPUT_FILE = ""

CHANGED_HOURS = []

def process_excel_to_dict(file_path):
    df = pd.read_excel(file_path)

    # Ensure column names are clean
    df.columns = df.columns.str.strip()

    df["Work Date"] = pd.to_datetime(df["Work Date"], dayfirst=True, errors='coerce').dt.strftime("%m/%d/%Y")

    # Initialize dictionary
    data_dict = {}

    for _, row in df.iterrows():
        # Skip rows with NaN in critical fields
        if pd.isna(row.get("Project Code")) or pd.isna(row.get("Position ID")) or pd.isna(row.get("Name")) or pd.isna(row.get("Task Code")):
            continue

        def safe_str(val):
            return str(val).strip() if pd.notna(val) else ""

        project_code = safe_str(row.get("Project Code"))
        project_id = safe_str(row.get("Position ID"))
        name = safe_str(row.get("Name"))
        work_date = safe_str(row.get("Work Date"))
        task_code = safe_str(row.get("Task Code"))
        rate_code = safe_str(row.get("Rate Code"))
        activity_code = safe_str(row.get("Activity Code"))
        billable = safe_str(row.get("Billable ?"))
        hours = row.get("Hours", 0) if pd.notna(row.get("Hours")) else 0
        notes = safe_str(row.get("Notes"))

        key = (project_code, name, work_date, task_code)

        data_dict[key] = [project_code, project_id, name, work_date, task_code,
                          rate_code, activity_code, billable, hours, notes]

    return data_dict


def compare_new_and_old(old_dict, new_dict):
    global CHANGED_HOURS

    HOURS = 8

    for key in list(old_dict):
        if key not in new_dict:
            o_val = old_dict.get(key)
            o_val[HOURS] = -abs(o_val[HOURS])
            CHANGED_HOURS.append(o_val)
            del old_dict[key]

    for key in list(new_dict):
        if key not in old_dict:
            n_val = new_dict.get(key)
            CHANGED_HOURS.append(n_val)
            del new_dict[key]

    for key, old_val in old_dict.items():

        new_val = new_dict[key]

        hour_dif = new_val[HOURS] - old_val[HOURS]

        if hour_dif != 0:
            updated_val = new_val.copy()
            updated_val[HOURS] = hour_dif
            CHANGED_HOURS.append(updated_val)


    return


def add_PM(changes, PM_SHEET):
    df_pm = pd.read_excel(PM_SHEET, sheet_name="PM List")
    missing_pm = []

    for row in changes:
        match = df_pm[df_pm["Project"] == row[0]]
        if not match.empty and len(row) == 10:
            pm_name = match["Project Manager"].iloc[0]
            row.append(pm_name)

        elif row[0] not in missing_pm and len(row) == 10:
            missing_pm.append(row[0])

    return changes, missing_pm


def output_csv(changes):

    columns = ['Project Code', 'Position ID', 'Name', 'Work Date', 'Task Code',
               'Rate Code', 'Activity Code', 'Billable ?', 'Hours', 'Notes', 'PM']

    df_to_save = pd.DataFrame(changes, columns=columns)

    df_extra = pd.read_excel(OUTPUT_FILE)

    df_combined = pd.concat([df_to_save, df_extra], ignore_index=True)

    file_path = "C:/Users/omark/Desktop/output.xlsx"

    with pd.ExcelWriter(file_path, engine="xlsxwriter") as writer:
        df_combined.to_excel(writer, index=False, sheet_name='Changes')

        workbook  = writer.book
        worksheet = writer.sheets['Changes']

        highlight_format = workbook.add_format({'bg_color': '#DCE6F1'})
       
        for row_num in range(1, len(df_to_save) + 1):
            worksheet.set_row(row_num, None, highlight_format)


def select_files():
    global OLD_FILE, NEW_FILE, PM_SHEET, OUTPUT_FILE

    root = tk.Tk()
    root.withdraw()

    print("Select OLD file")
    OLD_FILE = filedialog.askopenfilename(title="Select OLD_FILE")

    print("Select NEW file")
    NEW_FILE = filedialog.askopenfilename(title="Select NEW_FILE")

    print("Select PM sheet")
    PM_SHEET = filedialog.askopenfilename(title="Select PM_SHEET")

    print("Select New week file ")
    OUTPUT_FILE = filedialog.askopenfilename(title="Select OUTPUT_FILE")

    return


def main():
    global CHANGED_HOURS
    select_files()

    old_dict = process_excel_to_dict(OLD_FILE)
    new_dict = process_excel_to_dict(NEW_FILE)

    compare_new_and_old(old_dict, new_dict)

    CHANGED_HOURS, missing_pm = add_PM(CHANGED_HOURS, PM_SHEET)

    if len(missing_pm) > 0:
        print("These Project codes are missing Project managers:")
        for project in missing_pm:
            print(project)

    output_csv(CHANGED_HOURS)

main()
